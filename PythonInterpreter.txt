# Python Interpreter

### Input: .txt file
- output of llvm-iterator (which is a C program)
- each line states metadata of single instruction in standardized format 
	- basic block that instruction is in
	- opcode
	- operands
	- for each operand, whether it is a constant or not

### Functionality
- interpreter loop will parse input file line by line
- for each line:
	- if all operands are constants, move on
	- otherwise:
		- if some operand is assigned a tainted value, taint it
		- if instruction is inside basic block that depends on "tainted condition", taint it
	- update:
		- program state (values of variables, etc.)
		- count of tainted variables
		- which variable(s) were responsible for tainting during this instruction
	- alert if taint threshold reached 


### Output: .txt file
- final count of tainted variables
- which variables are tainted
- statistics:
	- taint levels over time
	- "point of inflection" of taint levels if there is explosion
	- which variables are responsible for tainting the highest number of other variables 

### QUESTIONS
- How do we determine which variables are initially tainted? Will this be arbitrary?
- How do we set a taint threshold?
- What should we keep track of in our snapshots?